import math

# Function to print the Tic-Tac-Toe board
def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 5)

# Function to check if a player has won
def check_winner(board, player):
    # Check rows and columns
    for i in range(3):
        if all([cell == player for cell in board[i]]) or all([board[j][i] == player for j in range(3)]):
            return True
    # Check diagonals
    if all([board[i][i] == player for i in range(3)]) or all([board[i][2 - i] == player for i in range(3)]):
        return True
    return False

# Function to check if the game is over
def game_over(board):
    return check_winner(board, 'X') or check_winner(board, 'O') or all([cell != '-' for row in board for cell in row])

# Function to evaluate the score of the board
def evaluate(board):
    if check_winner(board, 'X'):
        return 1
    elif check_winner(board, 'O'):
        return -1
    else:
        return 0

# Minimax function with Alpha-Beta Pruning
def minimax(board, depth, alpha, beta, maximizing_player):
    if game_over(board) or depth == 0:
        return evaluate(board)

    if maximizing_player:
        max_eval = -math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == '-':
                    board[i][j] = 'X'
                    eval = minimax(board, depth - 1, alpha, beta, False)
                    board[i][j] = '-'
                    max_eval = max(max_eval, eval)
                    alpha = max(alpha, eval)
                    if beta <= alpha:
                        break
        return max_eval
    else:
        min_eval = math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == '-':
                    board[i][j] = 'O'
                    eval = minimax(board, depth - 1, alpha, beta, True)
                    board[i][j] = '-'
                    min_eval = min(min_eval, eval)
                    beta = min(beta, eval)
                    if beta <= alpha:
                        break
        return min_eval

# Function to find the best move using Minimax
def best_move(board):
    best_score = -math.inf
    best_move = None
    for i in range(3):
        for j in range(3):
            if board[i][j] == '-':
                board[i][j] = 'X'
                score = minimax(board, 5, -math.inf, math.inf, False)
                board[i][j] = '-'
                if score > best_score:
                    best_score = score
                    best_move = (i, j)
    return best_move

# Main function to play the game
def play_game():
    board = [['-' for _ in range(3)] for _ in range(3)]
    print("Welcome to Tic-Tac-Toe!")
    print_board(board)

    while not game_over(board):
        # Player's move
        row, col = map(int, input("Enter your move (row and column): ").split())
        if board[row][col] == '-':
            board[row][col] = 'O'
            print_board(board)
        else:
            print("Invalid move! Try again.")
            continue

        # Check if player has won
        if check_winner(board, 'O'):
            print("Congratulations! You win!")
            return

        # AI's move
        print("AI's move:")
        ai_move = best_move(board)
        board[ai_move[0]][ai_move[1]] = 'X'
        print_board(board)

        # Check if AI has won
        if check_winner(board, 'X'):
            print("AI wins! Better luck next time.")
            return

    print("It's a draw!")

# Start the game
play_game()
